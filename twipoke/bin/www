#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('twipoke:server');
var http = require('http');
var firestoreDB = require('../config/firestore_config');
// const { deconstructPacket } = require('../public/socket.io/client-dist/socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ADDED!! Require Socket.IO
 */
var io = require('socket.io')(server);

/**
 * start socket.io
 */

// 対戦ルームの入室処理。相手が入ってきたら自分のデータを相手に送信する。
io.sockets.on('connection', (socket) => {

  socket.on('enemyCheck', async (data) => {
    socket.join(data.roomID);
    const ids = await io.in(data.roomID).allSockets();
    if (ids.size === 1) {
      io.to(socket.id).emit('redirectSearchPage');
      socket.disconnect(true);
    }
  })

  socket.on('join', async (data) => {
    socket.join(data.roomID);
    const myID = socket.id;
    const allID = await io.in(data.roomID).allSockets();
    if (allID.size === 2) {
      for (const id of allID) {
        if (id != myID) {
          io.to(id).emit('sendMyData', {
            profileImage: data.profileImage,
            twitterName: data.twitterName,
            twitterID: data.twitterID,
            rate: data.rate,
            win: data.win,
            lose: data.lose
          });
        }
      }
    };
  });

  socket.on('joinPreparationRoom', async (data) => {
    socket.join(data.roomID);
    const allID = await io.in(data.roomID).allSockets();
    const types = data.types;
    for (const id of allID) {
      if (id != socket.id) {
        io.to(id).emit('myFollowersType', {
          types
        });
      }
    }
  });

  socket.on('sendMyFollowersType', async (data) => {
    const allID = await io.in(data.roomID).allSockets();
    const types = data.types;
    for (const id of allID) {
      if (id != socket.id) {
        io.to(id).emit('myFollowersType', {
          types
        });
      }
    }
  });

  socket.on('sendEnemyData', async (data) => {
    const myID = socket.id;
    const allID = await io.in(data.roomID).allSockets();
    for (const id of allID) {
      if (id != myID) {
        io.to(id).emit('sendMyData', {
          profileImage: data.profileImage,
          twitterName: data.twitterName,
          twitterID: data.twitterID,
          rate: data.rate,
          win: data.win,
          lose: data.lose
        });
      }
    }
  });

  // クライアント側から対戦準備開始ボタンが押された時に発火。
  // 相手が待機状態であるか確認後、処理を実行する。
  socket.on('waitingResponse', async (data) => {
    socket.waitingFlg = data.waitingFlg;
    const allID = await io.in(data.roomID).allSockets();
    for (const id of allID) {
      if (id != socket.id) {
        const waitingFlg = socket.to(data.roomID).adapter.nsp.sockets.get(id).waitingFlg;
        if (waitingFlg === true) {
          io.to(id).emit('startMatchPreparation');
          io.to(socket.id).emit('startMatchPreparation');
        } else {
          io.to(socket.id).emit('waitingEnemy');
        }
      }
    }
  });

  // 対戦部屋合流処理-----------------------------------------------
  socket.on('joinMatchRoom', async (data) => {
    socket.join(data.roomID);
    const myID = socket.id;
    const allID = await io.in(data.roomID).allSockets();
    if (allID.size === 2) {
      for (const id of allID) {
        if (id != myID) {
          io.to(id).emit('setEnemyFollower', {
            twitterName: data.twitterName,
            enemyName: data.followerName,
            enemyImg: data.followerImg,
            enemyType: data.followerType,
            enemyHP: data.followerHP
          });
        }
      }
    };
  });

  socket.on('sendMyFollower', async (data) => {
    const allID = await io.in(data.roomID).allSockets();
    for (const id of allID) {
      if (id != socket.id) {
        io.to(id).emit('setEnemyFollower', {
          twitterName: data.twitterName,
          enemyName: data.followerName,
          enemyImg: data.followerImg,
          enemyType: data.followerType,
          enemyHP: data.followerHP
        });
      }
    }
  });
  // -------------------------------------------------------------

  // 待機状態を解除して、相互処理のループを回避する処理
  socket.on('changeIsMerge', async (data) => {
    const allID = await io.in(data.roomID).allSockets();
    for (const id of allID) {
      if (id != socket.id) {
        io.to(id).emit('loopStop');
      }
    }
  });

  // 相手の行動決定を待機する処理
  socket.on('waiting', async (data) => {
    const allID = await io.in(data.roomID).allSockets();
    socket.isStartAction = true;
    for (const id of allID) {
      if (id != socket.id) {
        const isStartAction = socket.to(data.roomID).adapter.nsp.sockets.get(id).isStartAction;
        if (isStartAction === true) {
          io.to(id).emit('actionStart', {
            dataset: data.dataset
          });
        } else {
          io.to(socket.id).emit('waitingMessage');
        }
      }
    }
  });

  socket.on('waitingResponse', async (data) => {
    socket.waitingFlg = data.waitingFlg;
    const allID = await io.in(data.roomID).allSockets();
    for (const id of allID) {
      if (id != socket.id) {
        const waitingFlg = socket.to(data.roomID).adapter.nsp.sockets.get(id).waitingFlg;
        if (waitingFlg === true) {
          io.to(id).emit('startMatchPreparation');
          io.to(socket.id).emit('startMatchPreparation');
        } else {
          io.to(socket.id).emit('waitingEnemy');
        }
      }
    }
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
